/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "ModelPrefixStoreApiOperations.h"
#include "PetstoreModule.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CppNamespace 
{

/* TODO: use those to make things correct
FPlatformHttp::HtmlEncode
FPlatformHttp::UrlEncode
FPlatformHttp::GetMimeType*/

	FString ModelPrefixStoreApi::DeleteOrderRequest::ComputePath() const
	{
		TMap<FString, FStringFormatArg> PathParams = { 
    	{ TEXT("orderId"), ToStringFormatArg(OrderId) } };

		FString Path = FString::Format(TEXT("/store/order/{orderId}"), PathParams);
		
		return Path;
	}

	void ModelPrefixStoreApi::DeleteOrderRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("DELETE"));
	}

	void ModelPrefixStoreApi::DeleteOrderResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 400:
			SetResponseString(TEXT("Invalid ID supplied"));
			break;
		case 404:
			SetResponseString(TEXT("Order not found"));
			break;
		}
	}

	bool ModelPrefixStoreApi::DeleteOrderResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return true;
	}


	FString ModelPrefixStoreApi::GetInventoryRequest::ComputePath() const
	{
		FString Path(TEXT("/store/inventory"));
		return Path;
	}

	void ModelPrefixStoreApi::GetInventoryRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("GET"));
	}

	void ModelPrefixStoreApi::GetInventoryResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		}
	}

	bool ModelPrefixStoreApi::GetInventoryResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}


	FString ModelPrefixStoreApi::GetOrderByIdRequest::ComputePath() const
	{
		TMap<FString, FStringFormatArg> PathParams = { 
    	{ TEXT("orderId"), ToStringFormatArg(OrderId) } };

		FString Path = FString::Format(TEXT("/store/order/{orderId}"), PathParams);
		
		return Path;
	}

	void ModelPrefixStoreApi::GetOrderByIdRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("GET"));
	}

	void ModelPrefixStoreApi::GetOrderByIdResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		case 400:
			SetResponseString(TEXT("Invalid ID supplied"));
			break;
		case 404:
			SetResponseString(TEXT("Order not found"));
			break;
		}
	}

	bool ModelPrefixStoreApi::GetOrderByIdResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}


	FString ModelPrefixStoreApi::PlaceOrderRequest::ComputePath() const
	{
		FString Path(TEXT("/store/order"));
		return Path;
	}

	void ModelPrefixStoreApi::PlaceOrderRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("POST"));

		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("body")); WriteJsonValue(Writer, Body);
		Writer->WriteObjectEnd();
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}

	void ModelPrefixStoreApi::PlaceOrderResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		case 400:
			SetResponseString(TEXT("Invalid Order"));
			break;
		}
	}

	bool ModelPrefixStoreApi::PlaceOrderResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}

}
