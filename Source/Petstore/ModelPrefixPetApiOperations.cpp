/**
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

#include "ModelPrefixPetApiOperations.h"
#include "PetstoreModule.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace CppNamespace 
{

/* TODO: use those to make things correct
FPlatformHttp::HtmlEncode
FPlatformHttp::UrlEncode
FPlatformHttp::GetMimeType*/

	FString ModelPrefixPetApi::AddPetRequest::ComputePath() const
	{
		FString Path(TEXT("/pet"));
		return Path;
	}

	void ModelPrefixPetApi::AddPetRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("POST"));

		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("body")); WriteJsonValue(Writer, Body);
		Writer->WriteObjectEnd();
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}

	void ModelPrefixPetApi::AddPetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 405:
			SetResponseString(TEXT("Invalid input"));
			break;
		}
	}

	bool ModelPrefixPetApi::AddPetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return true;
	}


	FString ModelPrefixPetApi::DeletePetRequest::ComputePath() const
	{
		TMap<FString, FStringFormatArg> PathParams = { 
    	{ TEXT("petId"), ToStringFormatArg(PetId) } };

		FString Path = FString::Format(TEXT("/pet/{petId}"), PathParams);
		
		return Path;
	}

	void ModelPrefixPetApi::DeletePetRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("DELETE"));

		// Header parameters
		if (ApiKey.IsSet())
		{
			HttpRequest->SetHeader(TEXT("api_key"), ApiKey.GetValue());
		}
	}

	void ModelPrefixPetApi::DeletePetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 400:
			SetResponseString(TEXT("Invalid pet value"));
			break;
		}
	}

	bool ModelPrefixPetApi::DeletePetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return true;
	}


	FString ModelPrefixPetApi::FindPetsByStatusRequest::ComputePath() const
	{
		FString Path(TEXT("/pet/findByStatus"));
		TArray<FString> QueryParams;
		QueryParams.Add(FString(TEXT("status=")) + CollectionToUrlString_csv(Status, TEXT("status")));
		Path += TCHAR('?');
		Path += FString::Join(QueryParams, TEXT("&"));

		return Path;
	}

	void ModelPrefixPetApi::FindPetsByStatusRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("GET"));
	}

	void ModelPrefixPetApi::FindPetsByStatusResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		case 400:
			SetResponseString(TEXT("Invalid status value"));
			break;
		}
	}

	bool ModelPrefixPetApi::FindPetsByStatusResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}


	FString ModelPrefixPetApi::FindPetsByTagsRequest::ComputePath() const
	{
		FString Path(TEXT("/pet/findByTags"));
		TArray<FString> QueryParams;
		QueryParams.Add(FString(TEXT("tags=")) + CollectionToUrlString_csv(Tags, TEXT("tags")));
		Path += TCHAR('?');
		Path += FString::Join(QueryParams, TEXT("&"));

		return Path;
	}

	void ModelPrefixPetApi::FindPetsByTagsRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("GET"));
	}

	void ModelPrefixPetApi::FindPetsByTagsResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		case 400:
			SetResponseString(TEXT("Invalid tag value"));
			break;
		}
	}

	bool ModelPrefixPetApi::FindPetsByTagsResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}


	FString ModelPrefixPetApi::GetPetByIdRequest::ComputePath() const
	{
		TMap<FString, FStringFormatArg> PathParams = { 
    	{ TEXT("petId"), ToStringFormatArg(PetId) } };

		FString Path = FString::Format(TEXT("/pet/{petId}"), PathParams);
		
		return Path;
	}

	void ModelPrefixPetApi::GetPetByIdRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("GET"));
	}

	void ModelPrefixPetApi::GetPetByIdResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		case 400:
			SetResponseString(TEXT("Invalid ID supplied"));
			break;
		case 404:
			SetResponseString(TEXT("Pet not found"));
			break;
		}
	}

	bool ModelPrefixPetApi::GetPetByIdResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}


	FString ModelPrefixPetApi::UpdatePetRequest::ComputePath() const
	{
		FString Path(TEXT("/pet"));
		return Path;
	}

	void ModelPrefixPetApi::UpdatePetRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("PUT"));

		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("body")); WriteJsonValue(Writer, Body);
		Writer->WriteObjectEnd();
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}

	void ModelPrefixPetApi::UpdatePetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 400:
			SetResponseString(TEXT("Invalid ID supplied"));
			break;
		case 404:
			SetResponseString(TEXT("Pet not found"));
			break;
		case 405:
			SetResponseString(TEXT("Validation exception"));
			break;
		}
	}

	bool ModelPrefixPetApi::UpdatePetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return true;
	}


	FString ModelPrefixPetApi::UpdatePetWithFormRequest::ComputePath() const
	{
		TMap<FString, FStringFormatArg> PathParams = { 
    	{ TEXT("petId"), ToStringFormatArg(PetId) } };

		FString Path = FString::Format(TEXT("/pet/{petId}"), PathParams);
		
		return Path;
	}

	void ModelPrefixPetApi::UpdatePetWithFormRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("POST"));

		//TODO: handle form parameter name
		//TODO: handle form parameter status
	}

	void ModelPrefixPetApi::UpdatePetWithFormResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 405:
			SetResponseString(TEXT("Invalid input"));
			break;
		}
	}

	bool ModelPrefixPetApi::UpdatePetWithFormResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return true;
	}


	FString ModelPrefixPetApi::UploadFileRequest::ComputePath() const
	{
		TMap<FString, FStringFormatArg> PathParams = { 
    	{ TEXT("petId"), ToStringFormatArg(PetId) } };

		FString Path = FString::Format(TEXT("/pet/{petId}/uploadImage"), PathParams);
		
		return Path;
	}

	void ModelPrefixPetApi::UploadFileRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
	{
		HttpRequest->SetVerb(TEXT("POST"));

		//TODO: handle form parameter additionalMetadata
		//TODO: handle form parameter file
	}

	void ModelPrefixPetApi::UploadFileResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
	{
		Response::SetHttpResponseCode(InHttpResponseCode);
		switch ((int)InHttpResponseCode)
		{
		case 200:
		default:
			SetResponseString(TEXT("successful operation"));
			break;
		}
	}

	bool ModelPrefixPetApi::UploadFileResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
	{
		return TryGetJsonValue(JsonValue, Content);
	}

}
