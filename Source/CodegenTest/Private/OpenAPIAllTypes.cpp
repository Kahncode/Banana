/**
 * UE4GeneratorTester
 * test
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIAllTypes.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI 
{

inline FString ToString(const OpenAPIAllTypes::Enum1Enum& Value)
{
	switch (Value)
	{
	case OpenAPIAllTypes::Enum1Enum::Enumvalue1:
		return TEXT("enumvalue1");
	case OpenAPIAllTypes::Enum1Enum::Enumvalue2:
		return TEXT("enumvalue2");
	case OpenAPIAllTypes::Enum1Enum::Enumvalue3:
		return TEXT("enumvalue3");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIAllTypes::Enum1Enum Value (%d)"), (int)Value);	
	return TEXT("");
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIAllTypes::Enum1Enum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIAllTypes::Enum1Enum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIAllTypes::Enum1Enum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		static TMap<FString, OpenAPIAllTypes::Enum1Enum> StringToEnum = {  };

		const auto Found = StringToEnum.Find(TmpValue);
		if(Found)
		{
			Value = *Found;
			return true;
		}
	}
	return false;
}

void OpenAPIAllTypes::WriteJson(JsonWriter& Writer) const
{
	Writer->WriteObjectStart();
	Writer->WriteIdentifierPrefix(TEXT("notype")); WriteJsonValue(Writer, Notype);
	Writer->WriteIdentifierPrefix(TEXT("int1")); WriteJsonValue(Writer, Int1);
	Writer->WriteIdentifierPrefix(TEXT("int2")); WriteJsonValue(Writer, Int2);
	Writer->WriteIdentifierPrefix(TEXT("int3")); WriteJsonValue(Writer, Int3);
	Writer->WriteIdentifierPrefix(TEXT("number1")); WriteJsonValue(Writer, Number1);
	Writer->WriteIdentifierPrefix(TEXT("number2")); WriteJsonValue(Writer, Number2);
	Writer->WriteIdentifierPrefix(TEXT("number3")); WriteJsonValue(Writer, Number3);
	Writer->WriteIdentifierPrefix(TEXT("string")); WriteJsonValue(Writer, String);
	Writer->WriteIdentifierPrefix(TEXT("string_byte")); WriteJsonValue(Writer, StringByte);
	Writer->WriteIdentifierPrefix(TEXT("boolean")); WriteJsonValue(Writer, Boolean);
	Writer->WriteIdentifierPrefix(TEXT("date")); WriteJsonValue(Writer, Date);
	Writer->WriteIdentifierPrefix(TEXT("date_time")); WriteJsonValue(Writer, DateTime);
	Writer->WriteIdentifierPrefix(TEXT("password")); WriteJsonValue(Writer, Password);
	if (Enum1.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("enum1")); WriteJsonValue(Writer, Enum1.GetValue());	
	}
	if (Enum2.IsSet())
	{
		Writer->WriteIdentifierPrefix(TEXT("enum2")); WriteJsonValue(Writer, Enum2.GetValue());	
	}
	Writer->WriteObjectEnd();
}

bool OpenAPIAllTypes::FromJson(const TSharedPtr<FJsonObject>& JsonObject)
{
	bool ParseSuccess = true;

	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("notype"), Notype);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("int1"), Int1);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("int2"), Int2);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("int3"), Int3);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("number1"), Number1);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("number2"), Number2);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("number3"), Number3);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("string"), String);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("string_byte"), StringByte);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("boolean"), Boolean);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("date"), Date);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("date_time"), DateTime);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("password"), Password);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("enum1"), Enum1);
	ParseSuccess &= TryGetJsonValue(JsonObject, TEXT("enum2"), Enum2);

	return ParseSuccess;
}
}
