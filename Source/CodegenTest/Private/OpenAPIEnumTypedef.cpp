/**
 * UE4GeneratorTester
 * test
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * https://github.com/OpenAPITools/openapi-generator
 * Do not edit the class manually.
 */

#include "OpenAPIEnumTypedef.h"

#include "OpenAPIModule.h"
#include "OpenAPIHelpers.h"

#include "Templates/SharedPointer.h"

namespace OpenAPI 
{

inline FString ToString(const OpenAPIEnumTypedef::Values& Value)
{
	switch (Value)
	{
	case OpenAPIEnumTypedef::Values::_:
		return TEXT("_");
	case OpenAPIEnumTypedef::Values::__:
		return TEXT("__");
	case OpenAPIEnumTypedef::Values::A:
		return TEXT("__a");
	case OpenAPIEnumTypedef::Values::AA:
		return TEXT("a__a");
	case OpenAPIEnumTypedef::Values::Enumvalue1:
		return TEXT("enumvalue1");
	case OpenAPIEnumTypedef::Values::Enumvalue2:
		return TEXT("enumvalue2");
	case OpenAPIEnumTypedef::Values::Enumvalue3:
		return TEXT("enumvalue3");
	}

	UE_LOG(LogOpenAPI, Error, TEXT("Invalid OpenAPIEnumTypedef::Values Value (%d)"), (int)Value);	
	return TEXT("");
}

inline FString OpenAPIEnumTypedef::EnumToString(const OpenAPIEnumTypedef::Values& EnumValue)
{
	return ToString(EnumValue);
}

inline bool FromString(const FString& EnumAsString, OpenAPIEnumTypedef::Values& Value)
{
	static TMap<FString, OpenAPIEnumTypedef::Values> StringToEnum = { 
		{ TEXT("_"), OpenAPIEnumTypedef::Values::_ },
		{ TEXT("__"), OpenAPIEnumTypedef::Values::__ },
		{ TEXT("__a"), OpenAPIEnumTypedef::Values::A },
		{ TEXT("a__a"), OpenAPIEnumTypedef::Values::AA },
		{ TEXT("enumvalue1"), OpenAPIEnumTypedef::Values::Enumvalue1 },
		{ TEXT("enumvalue2"), OpenAPIEnumTypedef::Values::Enumvalue2 },
		{ TEXT("enumvalue3"), OpenAPIEnumTypedef::Values::Enumvalue3 }, };

	const auto Found = StringToEnum.Find(EnumAsString);
	if(Found)
		Value = *Found;

	return Found != nullptr;
}

inline bool OpenAPIEnumTypedef::EnumFromString(const FString& EnumAsString, OpenAPIEnumTypedef::Values& EnumValue)
{
	return FromString(EnumAsString, EnumValue);
}

inline FStringFormatArg ToStringFormatArg(const OpenAPIEnumTypedef::Values& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const OpenAPIEnumTypedef::Values& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, OpenAPIEnumTypedef::Values& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		if(FromString(TmpValue, Value))
			return true;
	}
	return false;
}

void OpenAPIEnumTypedef::WriteJson(JsonWriter& Writer) const
{
	WriteJsonValue(Writer, Value);
}

bool OpenAPIEnumTypedef::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return TryGetJsonValue(JsonValue, Value);
}

}
