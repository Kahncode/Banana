/**
 * UE4GeneratorTester
 * test
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
#include "SwaggerDefaultApiOperations.h"

#include "SwaggerModule.h"
#include "SwaggerHelpers.h"

#include "Dom/JsonObject.h"
#include "Templates/SharedPointer.h"
#include "HttpModule.h"
#include "PlatformHttp.h"

namespace Swagger 
{

inline FString ToString(const SwaggerDefaultApi::AddPetRequest::StatusEnum& Value)
{
	switch (Value)
	{
	case SwaggerDefaultApi::AddPetRequest::StatusEnum::Available:
		return TEXT("available");
	case SwaggerDefaultApi::AddPetRequest::StatusEnum::Pending:
		return TEXT("pending");
	case SwaggerDefaultApi::AddPetRequest::StatusEnum::Sold:
		return TEXT("sold");
	}

	UE_LOG(LogSwagger, Error, TEXT("Invalid SwaggerDefaultApi::AddPetRequest::StatusEnum Value (%d)"), (int)Value);	
	return TEXT("");
}

inline FStringFormatArg ToStringFormatArg(const SwaggerDefaultApi::AddPetRequest::StatusEnum& Value)
{
	return FStringFormatArg(ToString(Value));
}

inline void WriteJsonValue(JsonWriter& Writer, const SwaggerDefaultApi::AddPetRequest::StatusEnum& Value)
{
	WriteJsonValue(Writer, ToString(Value));
}

inline bool TryGetJsonValue(const TSharedPtr<FJsonValue>& JsonValue, SwaggerDefaultApi::AddPetRequest::StatusEnum& Value)
{
	FString TmpValue;
	if (JsonValue->TryGetString(TmpValue))
	{
		static TMap<FString, SwaggerDefaultApi::AddPetRequest::StatusEnum> StringToEnum = { 
			{ TEXT("available"), SwaggerDefaultApi::AddPetRequest::StatusEnum::Available },
			{ TEXT("pending"), SwaggerDefaultApi::AddPetRequest::StatusEnum::Pending },
			{ TEXT("sold"), SwaggerDefaultApi::AddPetRequest::StatusEnum::Sold }, };

		const auto Found = StringToEnum.Find(TmpValue);
		if(Found)
		{
			Value = *Found;
			return true;
		}
	}
	return false;
}

FString SwaggerDefaultApi::AddPetRequest::ComputePath() const
{
	FString Path(TEXT("/test"));
	TArray<FString> QueryParams;
	QueryParams.Add(FString(TEXT("status=")) + CollectionToUrlString_csv(Status, TEXT("status")));
	Path += TCHAR('?');
	Path += FString::Join(QueryParams, TEXT("&"));

	return Path;
}

void SwaggerDefaultApi::AddPetRequest::SetupHttpRequest(const TSharedRef<IHttpRequest>& HttpRequest) const
{
	static const TArray<FString> Consumes = { TEXT("application/json"), TEXT("application/xml") };
	//static const TArray<FString> Produces = { TEXT("application/xml"), TEXT("application/json") };

	HttpRequest->SetVerb(TEXT("POST"));

	// Default to Json Body request
	if (Consumes.Num() == 0 || Consumes.Contains(TEXT("application/json")))
	{
		// Body parameters
		FString JsonBody;
		JsonWriter Writer = TJsonWriterFactory<>::Create(&JsonBody);

		Writer->WriteObjectStart();
		Writer->WriteIdentifierPrefix(TEXT("body")); WriteJsonValue(Writer, Body);
		Writer->WriteObjectEnd();
		Writer->Close();

		HttpRequest->SetHeader(TEXT("Content-Type"), TEXT("application/json; charset=utf-8"));
		HttpRequest->SetContentAsString(JsonBody);
	}
	else if (Consumes.Contains(TEXT("multipart/form-data")))
	{
		UE_LOG(LogSwagger, Error, TEXT("Body parameter (body) was ignored, not supported in multipart form"));
	}
	else if (Consumes.Contains(TEXT("application/x-www-form-urlencoded")))
	{
		UE_LOG(LogSwagger, Error, TEXT("Body parameter (body) was ignored, not supported in urlencoded requests"));
	}
	else
	{
		UE_LOG(LogSwagger, Error, TEXT("Request ContentType not supported (%s)"), *FString::Join(Consumes, TEXT(",")));
	}
}

void SwaggerDefaultApi::AddPetResponse::SetHttpResponseCode(EHttpResponseCodes::Type InHttpResponseCode)
{
	Response::SetHttpResponseCode(InHttpResponseCode);
	switch ((int)InHttpResponseCode)
	{
	case 405:
		SetResponseString(TEXT("Invalid input"));
		break;
	}
}

bool SwaggerDefaultApi::AddPetResponse::FromJson(const TSharedPtr<FJsonValue>& JsonValue)
{
	return true;
}

}
